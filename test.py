# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from "+tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql="update "+tabel+" set salary=NULL where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0])*10000)

            max_salry = str(max_salry[0]).replace("万/月","")
            max_salry = int(float(max_salry)*10000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0])*1000)

            max_salry = str(max_salry[0]).replace("千/月","")
            max_salry = int(float(max_salry)*1000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天","")
            min_salary=max_salry = int(float(salary)*30)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0])*10000/12)

            max_salry = str(max_salry[0]).replace("万/年","")
            max_salry = int(float(max_salry)*10000/12)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update "+tabel+" set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from "+tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql="update "+tabel+" set salary=NULL where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0])*10000)

            max_salry = str(max_salry[0]).replace("万/月","")
            max_salry = int(float(max_salry)*10000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0])*1000)

            max_salry = str(max_salry[0]).replace("千/月","")
            max_salry = int(float(max_salry)*1000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天","")
            min_salary=max_salry = int(float(salary)*30)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0])*10000/12)

            max_salry = str(max_salry[0]).replace("万/年","")
            max_salry = int(float(max_salry)*10000/12)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update "+tabel+" set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from "+tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql="update "+tabel+" set salary=NULL where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0])*10000)

            max_salry = str(max_salry[0]).replace("万/月","")
            max_salry = int(float(max_salry)*10000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0])*1000)

            max_salry = str(max_salry[0]).replace("千/月","")
            max_salry = int(float(max_salry)*1000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天","")
            min_salary=max_salry = int(float(salary)*30)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0])*10000/12)

            max_salry = str(max_salry[0]).replace("万/年","")
            max_salry = int(float(max_salry)*10000/12)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update "+tabel+" set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包

# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from "+tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql="update "+tabel+" set salary=NULL where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0])*10000)

            max_salry = str(max_salry[0]).replace("万/月","")
            max_salry = int(float(max_salry)*10000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0])*1000)

            max_salry = str(max_salry[0]).replace("千/月","")
            max_salry = int(float(max_salry)*1000)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天","")
            min_salary=max_salry = int(float(salary)*30)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary,max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0])*10000/12)

            max_salry = str(max_salry[0]).replace("万/年","")
            max_salry = int(float(max_salry)*10000/12)

            # 将处理后的工资写入数据库
            sql="update "+tabel+" set min_salry='"+str(min_salary)+"',max_salary='"+str(max_salry)+"' where salary='"+data[i][2]+"' and job_name='"+data[i][0]+"' and company_name='"+data[i][1]+"' and work_place='"+data[i][3]+"'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update "+tabel+" set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect
# 建立数据库的连接
conn = Connect(host="localhost",user="root",password="13820541017",database="jobdata",charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif']=['FangSong']
plt.rcParams['axes.unicode_minus']=False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list=["java开发","自然语言处理","深度学习","机器学习","android开发","算法工程师","后端开发","前端开发","教师","交通运输","医生","护士","房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/"+file+".xls"
    vars()[file_name] = pd.read_excel(file_name,index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file),fontsize=14,color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator=MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000,550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict",sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布",fontsize=14,color="blue")
    plt.xlabel("{}异常值检测".format(file),fontsize=14,color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i>0:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.5-0.8/(y[i]-y[i-1]),y[i]))
        else:
            plt.annotate(y[i],xy=(x[i],y[i]),xytext=(x[i]+0.08,y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500,29500),(1500,15000),(1400,21000),(1300,20000),(1400,21000),(1400,18000),(1300,17000),(1300,18000),(1500,20000),(1800,27000),(2000,28000),(1600,15000),(1700,16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2]>outlier_salary[i][1] or item[2]<outlier_salary[i][0]:
            print(item[2])
            sql1="update "+tabel_list[i]+" set salary=NULL where job_name='"+item[0]+"' and company_name='"+item[1]+"' and work_place='"+item[3]+"'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入连接数据库的包
from pymysql import Connect

# 连接数据库
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建一个游标，用来执行sql语句
cursor = conn.cursor()

# 定义存放数据库表结构的列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
# tabel_list = ["java开发"]
# 从数据库中取出所有的工资数据
for tabel in tabel_list:
    sql = "select job_name,company_name,salary,work_place from " + tabel
    cursor.execute(sql)
    # 使用fetchall进行数据库的取值
    data = cursor.fetchall()
    for i in range(len(data)):

        # 如果工资数据为空，那么就置空
        if data[i][2] == "":
            sql = "update " + tabel + " set salary=NULL where salary='" + data[i][2] + "' and job_name='" + data[i][
                0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()
        # 将工作数据，转换为字符串。然后应用切片操作
        salary = str(data[i][2])
        # 处理以“万/月”结尾的工资数据
        if salary[-3:] == "万/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000，最后再取整
            min_salary = int(float(min_salary[0]) * 10000)

            max_salry = str(max_salry[0]).replace("万/月", "")
            max_salry = int(float(max_salry) * 10000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "千/月":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*1000，最后再取整
            min_salary = int(float(min_salary[0]) * 1000)

            max_salry = str(max_salry[0]).replace("千/月", "")
            max_salry = int(float(max_salry) * 1000)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "元/天":
            salary = str(salary).replace("元/天", "")
            min_salary = max_salry = int(float(salary) * 30)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

        if salary[-3:] == "万/年":
            # zip()可以简单的理解为拉链函数
            min_salary, max_salry = zip(salary.split("-"))
            # min_salary为一个字符串，首先需要将其转换为浮点型，然后再*10000/12，最后再取整
            min_salary = int(float(min_salary[0]) * 10000 / 12)

            max_salry = str(max_salry[0]).replace("万/年", "")
            max_salry = int(float(max_salry) * 10000 / 12)

            # 将处理后的工资写入数据库
            sql = "update " + tabel + " set min_salry='" + str(min_salary) + "',max_salary='" + str(
                max_salry) + "' where salary='" + data[i][2] + "' and job_name='" + data[i][
                      0] + "' and company_name='" + data[i][1] + "' and work_place='" + data[i][3] + "'"
            print(sql)
            cursor.execute(sql)
            conn.commit()

    # 处理工资，salary = (min_salary+max_salary)/2
    sql = "update " + tabel + " set salary = (min_salry+max_salary)/2"
    cursor.execute(sql)
    conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()

# 导入相应的包
import pandas as pd
import matplotlib.pyplot as plt
# 用来设置坐标轴的刻度
from matplotlib.pyplot import MultipleLocator
# 连接数据库
from pymysql import Connect

# 建立数据库的连接
conn = Connect(host="localhost", user="root", password="13820541017", database="jobdata", charset="utf8")
# 创建游标
cursor = conn.cursor()

# 设置图像显示中文和负号
plt.rcParams['font.sans-serif'] = ['FangSong']
plt.rcParams['axes.unicode_minus'] = False

# 使用循环，一次性将所有的异常值都检测出来
# 定义存放execl文件列表
tabel_list = ["java开发", "自然语言处理", "深度学习", "机器学习", "android开发", "算法工程师", "后端开发", "前端开发",
              "教师", "交通运输", "医生", "护士", "房地产"]
for file in tabel_list:
    # 读取Excel表格数据
    file_name = "data/" + file + ".xls"
    vars()[file_name] = pd.read_excel(file_name, index_col="min_salry")

    # 打印工作类型的统计数据
    print(vars()[file_name].describe())
    print("***************")
    # 创建画布，主要用来绘制箱型图，检测异常值
    figure = plt.figure(num="{}".format(file))
    # 给图像设置一个小标题
    plt.title("{}".format(file), fontsize=14, color="blue")

    # 设置x轴和y轴的刻度
    y_major_locator = MultipleLocator(15000)
    ax = plt.gca()
    ax.yaxis.set_major_locator(y_major_locator)
    plt.ylim([-20000, 550000])

    # 画箱型图，这里采用DataFrame的方法
    p1 = vars()[file_name].boxplot(return_type="dict", sym="r")

    # 为异常值打一个标签
    x = p1['fliers'][0].get_xdata()
    y = p1['fliers'][0].get_ydata()

    # 对y的值进行排序
    y.sort()

    # 给x轴和y轴各起一个标题
    plt.ylabel("工资分布", fontsize=14, color="blue")
    plt.xlabel("{}异常值检测".format(file), fontsize=14, color="blue")

    # 对所有点进行添加注释
    for i in range(len(x)):
        if i > 0:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.5 - 0.8 / (y[i] - y[i - 1]), y[i]))
        else:
            plt.annotate(y[i], xy=(x[i], y[i]), xytext=(x[i] + 0.08, y[i]))

# 打印出了所有的异常值检测结果
plt.show()

# 创建两张列表，分别用来存放各个数据的最小工作和最大工资
outlier_salary = [(1500, 29500), (1500, 15000), (1400, 21000), (1300, 20000), (1400, 21000), (1400, 18000),
                  (1300, 17000), (1300, 18000), (1500, 20000), (1800, 27000), (2000, 28000), (1600, 15000),
                  (1700, 16000)]

# 循环便利所有的表，从表中去除异常值
for i in range(len(tabel_list)):
    sql = "select job_name,company_name,salary,work_place from {}".format(tabel_list[i])
    cursor.execute(sql)
    result = cursor.fetchall()

    # 便利result,取出工资数据
    for item in result:
        # 开始过滤异常值
        if item[2] == None:
            pass
        elif item[2] > outlier_salary[i][1] or item[2] < outlier_salary[i][0]:
            print(item[2])
            sql1 = "update " + tabel_list[i] + " set salary=NULL where job_name='" + item[0] + "' and company_name='" + \
                   item[1] + "' and work_place='" + item[3] + "'"
            cursor.execute(sql1)
            conn.commit()
